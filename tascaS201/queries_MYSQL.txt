-- 1. Lista de alumnos ordenada alfabéticamente por apellidos y nombre
SELECT apellido1, apellido2, nombre
FROM persona
WHERE tipo = 'alumno'
ORDER BY apellido1, apellido2, nombre;

-- 2. Alumnos sin número de teléfono
SELECT nombre, apellido1, apellido2
FROM persona
WHERE tipo = 'alumno' 
AND telefono IS NULL;

-- 3. Alumnos nacidos en 1999
SELECT *
FROM persona
WHERE tipo = 'alumno' 
AND YEAR(fecha_nacimiento) = 1999;

-- 4. Profesores sin teléfono y NIF acabado en K
SELECT *
FROM persona
WHERE tipo = 'profesor' 
AND telefono IS NULL 
AND nif LIKE '%K';

-- 5. Asignaturas del primer semestre, tercer curso de licenciatura 7
SELECT *
FROM asignatura
WHERE cuatrimestre = 1 
AND curso = 3 
AND id_grado = 7;

-- 6. Profesores con sus nombres de departamento, ordenados alfabéticamente
SELECT p.apellido1, p.apellido2, p.nombre, d.nombre as nombre_departamento
FROM persona p
JOIN profesor pr ON p.id = pr.id_profesor
JOIN departamento d ON pr.id_departamento = d.id
ORDER BY p.apellido1, p.nombre;

-- 7. Asignaturas y cursos escolares para alumnos con NIF 26902806M
SELECT a.nombre as nombre_asignatura, ce.anyo_inicio, ce.anyo_fin
FROM persona p
JOIN alumno_se_matricula_asignatura am ON p.id = am.id_alumno
JOIN asignatura a ON am.id_asignatura = a.id
JOIN curso_escolar ce ON am.id_curso_escolar = ce.id
WHERE p.nif = '26902806M';

-- 8. Departamentos con profesores en Ingeniería Informática (Plan 2015)
SELECT DISTINCT d.nombre as nombre_departamento
FROM departamento d
JOIN profesor pr ON d.id = pr.id_departamento
JOIN asignatura a ON pr.id_profesor = a.id_profesor
JOIN grado g ON a.id_grado = g.id
WHERE g.nombre LIKE '%Ingeniería Informática%'
AND g.nombre LIKE '%(Plan 2015)%';

-- 9. Alumnos matriculados en el curso 2018/2019
SELECT DISTINCT p.*
FROM persona p
JOIN alumno_se_matricula_asignatura am ON p.id = am.id_alumno
JOIN curso_escolar ce ON am.id_curso_escolar = ce.id
WHERE ce.anyo_inicio = 2018
AND ce.anyo_fin = 2019
AND p.tipo = 'alumno';

LEFT JOIN i RIGHT JOIN

1. Lista de todos los profesores con sus departamentos (incluidos los profesores sin departamento):
SELECT d.nombre AS departamento, p.apellido1, p.apellido2, p.nombre
FROM persona p
LEFT JOIN profesor pr ON p.id = pr.id_profesor
LEFT JOIN departamento d ON pr.id_departamento = d.id
WHERE p.tipo = 'profesor'
ORDER BY d.nombre ASC, p.apellido1 ASC, p.apellido2 ASC, p.nombre ASC;

2. Profesores no asociados a ningún departamento:
SELECT p.*
FROM persona p
LEFT JOIN profesor pr ON p.id = pr.id_profesor
WHERE p.tipo = 'profesor' AND pr.id_departamento IS NULL;

3. Departamentos sin profesores asociados:
SELECT d.*
FROM departamento d
LEFT JOIN profesor pr ON d.id = pr.id_departamento
WHERE pr.id_profesor IS NULL;

4. Profesores que no enseñan ninguna asignatura:
SELECT p.*
FROM persona p
LEFT JOIN asignatura a ON p.id = a.id_profesor
WHERE p.tipo = 'profesor' AND a.id_profesor IS NULL;

5. Asignaturas sin profesor asignado:
SELECT a.*
FROM asignatura a
WHERE a.id_profesor IS NULL;

6. Departamentos que no han impartido ninguna asignatura en ningún curso escolar:
SELECT d.*
FROM departamento d
WHERE d.id NOT IN (
    SELECT DISTINCT pr.id_departamento
    FROM profesor pr
    JOIN asignatura a ON pr.id_profesor = a.id_profesor
);



1. Número total de alumnos:
SELECT COUNT(*) AS total_students
FROM persona
WHERE tipo = 'alumno';

2. Alumnos nacidos en 1999:
SELECT COUNT(*) AS students_1999
FROM persona
WHERE tipo = 'alumno' AND YEAR(fecha_nacimiento) = 1999;

3. Número de profesores por departamento (sólo departamentos con profesores):
SELECT d.nombre AS departamento, COUNT(pr.id_profesor) AS num_profesores
FROM departamento d
JOIN profesor pr ON d.id = pr.id_departamento
GROUP BY d.nombre
ORDER BY num_profesores DESC;

4. Todos los departamentos con número de profesores (incluidos los departamentos sin profesores):
SELECT d.nombre AS departamento, COUNT(pr.id_profesor) AS num_profesores
FROM departamento d
LEFT JOIN profesor pr ON d.id = pr.id_departamento
GROUP BY d.nombre
ORDER BY num_profesores DESC;

5. Todos los grados con número de asignaturas (incluidos los grados sin asignaturas):
SELECT g.nombre AS grado, COUNT(a.id) AS num_asignaturas
FROM grado g
LEFT JOIN asignatura a ON g.id = a.id_grado
GROUP BY g.nombre
ORDER BY num_asignaturas DESC;

6. Grados con más de 40 asignaturas:
SELECT g.nombre AS grado, COUNT(a.id) AS num_asignaturas
FROM grado g
JOIN asignatura a ON g.id = a.id_grado
GROUP BY g.nombre
HAVING num_asignaturas > 40;

7. Suma de créditos por grado y tipo de asignatura:
SELECT g.nombre AS grado, a.tipo, SUM(a.creditos) AS total_creditos
FROM grado g
JOIN asignatura a ON g.id = a.id_grado
GROUP BY g.nombre, a.tipo
ORDER BY g.nombre, a.tipo;

8. Número de alumnos matriculados por curso escolar:
SELECT ce.anyo_inicio, COUNT(DISTINCT asma.id_alumno) AS num_alumnos
FROM curso_escolar ce
JOIN alumno_se_matricula_asignatura asma ON ce.id = asma.id_curso_escolar
GROUP BY ce.anyo_inicio
ORDER BY ce.anyo_inicio;

9. Número de asignaturas impartidas por cada profesor (incluidos los profesores sin asignaturas):
SELECT p.id, p.nombre, p.apellido1, p.apellido2, COUNT(a.id) AS num_asignaturas
FROM persona p
LEFT JOIN asignatura a ON p.id = a.id_profesor
WHERE p.tipo = 'profesor'
GROUP BY p.id, p.nombre, p.apellido1, p.apellido2
ORDER BY num_asignaturas DESC;

10. Alumno más joven:
SELECT *
FROM persona
WHERE tipo = 'alumno'
ORDER BY fecha_nacimiento DESC
LIMIT 1;

11. Profesores con departamento pero sin asignaturas:
SELECT p.*
FROM persona p
JOIN profesor pr ON p.id = pr.id_profesor
LEFT JOIN asignatura a ON p.id = a.id_profesor
WHERE p.tipo = 'profesor' AND a.id IS NULL;

TIENDA 

1. Enumere el nombre de todos los productos que están en la tabla de productos.
SELECT nombre FROM producto;

2. Enumere los nombres y precios de todos los productos de la tabla de productos.
SELECT nombre, precio FROM producto;

3. Enumere todas las columnas de la tabla de productos.
SHOW COLUMNS FROM producto;

4. Enumere el nombre de los productos, el precio en euros y el precio en dólares estadounidenses (USD).
SELECT nombre, precio AS euros, precio * 1.07 AS dollars FROM producto;

5. Enumere el nombre de los productos, el precio en euros y el precio en dólares estadounidenses (USD). Use los siguientes alias para columnas: nombre del producto, euros, dólares.
SELECT nombre AS 'product name', precio AS euros, precio * 1.07 AS dollars FROM producto;

6. Enumere los nombres y precios de todos los productos de la tabla de productos, convirtiendo los nombres en mayúsculas.
SELECT UPPER(nombre), precio FROM producto;

7. Enumere los nombres y precios de todos los productos de la tabla de productos, convirtiendo los nombres en minúsculas.
SELECT LOWER(nombre), precio FROM producto;

8. Enumere el nombre de todos los fabricantes en una columna, y en otra columna se capitaliza los dos primeros caracteres del nombre del fabricante.
SELECT nombre, CONCAT(UPPER(LEFT(nombre, 2)), SUBSTRING(nombre, 3)) AS modified_name FROM fabricante;

9. Enumere los nombres y precios de todos los productos de la tabla de productos, completando el valor del precio.
SELECT nombre, LPAD(precio, 10, ' ') AS precio FROM producto;

10. Enumere los nombres y precios de todos los productos de la tabla de productos, truncando el valor del precio para mostrarlo sin ningún número decimal.
SELECT nombre, TRUNCATE(precio, 0) AS precio FROM producto;

11. Enumere el código de fabricantes que tiene productos en la tabla de productos.
SELECT codigo_fabricante FROM producto;

12. Enumere el código de fabricantes que tiene productos en la tabla de productos, eliminando los códigos que aparecen repetidos.
SELECT DISTINCT codigo_fabricante FROM producto;

13. Enumere los nombres de los fabricantes ordenados ascendentes.
SELECT nombre FROM fabricante ORDER BY nombre ASC;

14. Enumere los nombres de los fabricantes ordenados por el nombre en orden descendente.
SELECT nombre FROM fabricante ORDER BY nombre DESC;

15. Listar los nombres de los productos ordenados primero por el nombre en orden ascendente y segundo por el precio en orden descendente.
SELECT nombre FROM producto ORDER BY nombre ASC, precio DESC;

16. Devolver una lista con las 5 primeras filas de la tabla de fabricación.
SELECT * FROM fabricante LIMIT 5;

17. Devolver una lista con 2 filas de la cuarta fila de la tabla de fabricación. La cuarta fila también debe incluirse en la respuesta.
SELECT * FROM fabricante LIMIT 3, 2;

18. Listar el nombre más barato y el precio del producto (Utilizar sólo orden por y límite). Nota: Aquí no podría utilizar Mín (precio), necesitaría GROUP BY.
SELECT nombre, precio FROM producto ORDER BY precio ASC LIMIT 1;

19. Enumere el producto más caro y el precio (Utilice sólo orden por y límite). Nota: Aquí no se podría utilizar Max (precio), necesitaría GROUP BY.
SELECT nombre, precio FROM producto ORDER BY precio DESC LIMIT 1;

20. Listar el nombre de todos los productos del fabricante cuyo código de fabricante sea igual a 2.
SELECT nombre FROM producto WHERE codigo_fabricante = 2;

21. Devolver una lista con el nombre del producto, el precio y el nombre del fabricante de todos los productos de la base de datos.
SELECT p.nombre, p.precio, f.nombre 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo;

22. Devolver una lista con el nombre del producto, el precio y el nombre del fabricante de todos los productos de la base de datos. Ordenar el resultado por nombre de fabricante, en orden alfabético.
SELECT p.nombre, p.precio, f.nombre 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
ORDER BY f.nombre ASC;

23. Devolver una lista con el código del producto, el nombre del producto, el fabricante y el nombre del fabricante de todos los productos de la base de datos.
SELECT p.codigo, p.nombre, p.codigo_fabricante, f.nombre 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo;

24. Devolver el nombre del producto, su precio y su nombre de fabricante, del producto más barato.
SELECT p.nombre, p.precio, f.nombre 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
ORDER BY p.precio ASC LIMIT 1;

25. Devolver el nombre del producto, su precio y el nombre de su fabricante, del producto más caro.
SELECT p.nombre, p.precio, f.nombre 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
ORDER BY p.precio DESC LIMIT 1;

26. Mostrar lista de todos los productos del fabricante Lenovo.
SELECT p.* 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
WHERE f.nombre = 'Lenovo';

27. Devolver una lista de todos los productos del fabricante crucial que tengan un precio superior a 200 euros.
SELECT p.* 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
WHERE f.nombre = 'Crucial' AND p.precio > 200;

28. Devolver una lista de todos los productos de los fabricantes ASUS, Hewlett-Packard y Seagate. Sin utilizar el operador IN.
SELECT p.* 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
WHERE f.nombre = 'Asus' OR f.nombre = 'Hewlett-Packard' OR f.nombre = 'Seagate';

29. Devolver una lista con todos los productos de los fabricantes de ASUS, Hewlett-Packardy Seagate. Utilizando el operador IN.
SELECT p.* 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
WHERE f.nombre IN ('Asus', 'Hewlett-Packard', 'Seagate');

30. Devolver una lista con el nombre y el precio de todos los productos de los fabricantes cuyo nombre termina con la vocal E.
SELECT p.nombre, p.precio 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
WHERE f.nombre LIKE '%e';

31. Devolver una lista con el nombre y el precio de todos los productos cuyo nombre de fabricante contiene la W en su nombre.
SELECT p.nombre, p.precio 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
WHERE f.nombre LIKE '%w%';

32. Devolver una lista con el nombre del producto, el precio y el nombre del fabricante, de todos los productos que tengan un precio mayor o igual a 180 euros. Ordenar el resultado primero por precio (en orden descendente) y después por nombre (en orden ascendente).
SELECT p.nombre, p.precio, f.nombre 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
WHERE p.precio >= 180
ORDER BY p.precio DESC, p.nombre ASC;

33. Devuelve una lista con el código y el nombre del fabricante, sólo de aquellos fabricantes que tienen productos asociados a la base de datos.
SELECT DISTINCT f.codigo, f.nombre 
FROM fabricante f
JOIN producto p ON f.codigo = p.codigo_fabricante;

34. Devuelve una lista con todos los fabricantes de la base de datos, junto con los productos que tiene cada uno de ellos. En la lista también deberán aparecer los fabricantes que no tengan productos asociados.
SELECT f.*, p.* 
FROM fabricante f
LEFT JOIN producto p ON f.codigo = p.codigo_fabricante;

35. Devuelve una lista en la que sólo aparecen los fabricantes que no tienen productos asociados.
SELECT f.* 
FROM fabricante f
LEFT JOIN producto p ON f.codigo = p.codigo_fabricante
WHERE p.codigo IS NULL;

36. Devolver todos los productos del fabricante Lenovo (sin utilizar inner join).
SELECT p.* 
FROM producto p, fabricante f
WHERE p.codigo_fabricante = f.codigo AND f.nombre = 'Lenovo';

37. Devolver todos los productos que tengan el mismo precio que el producto más caro del fabricante Lenovo. (Sin utilizar inner join).
SELECT p.* 
FROM producto p, fabricante f
WHERE p.codigo_fabricante = f.codigo 
AND f.nombre = 'Lenovo'
AND p.precio = (SELECT MAX(precio) FROM producto p, fabricante f WHERE p.codigo_fabricante = f.codigo AND f.nombre = 'Lenovo');

38. Listar el producto más caro del fabricante Lenovo.
SELECT p.* 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
WHERE f.nombre = 'Lenovo'
ORDER BY p.precio DESC LIMIT 1;

39. Listar el producto más barato del fabricante Hewlett-Packard.
SELECT p.nombre 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
WHERE f.nombre = 'Hewlett-Packard'
ORDER BY p.precio ASC LIMIT 1;

40. Devolver todos los productos de la base de datos que tengan un precio superior o igual al producto más caro del fabricante Lenovo.
SELECT p.* 
FROM producto p
WHERE p.precio >= (SELECT MAX(precio) FROM producto p JOIN fabricante f ON p.codigo_fabricante = f.codigo WHERE f.nombre = 'Lenovo');

41. Leer todos los productos del fabricante ASUS que tienen un precio superior al precio medio de todos sus productos.
SELECT p.* 
FROM producto p
JOIN fabricante f ON p.codigo_fabricante = f.codigo
WHERE f.nombre = 'Asus'
AND p.precio > (SELECT AVG(precio) FROM producto p JOIN fabricante f ON p.codigo_fabricante = f.codigo WHERE f.nombre = 'Asus');